#include <stdio.h>

#define TAM_TABULEIRO 10   // tamanho fixo do tabuleiro
#define TAM_NAVIO 3        // tamanho fixo dos navios

int main() {
    int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO] = {0};  
    // inicializa todo o tabuleiro com 0 (água)

    // Coordenadas iniciais dos navios
    int navioHorizontalLinha = 2;  // linha inicial do navio horizontal
    int navioHorizontalColuna = 1; // coluna inicial do navio horizontal

    int navioVerticalLinha = 5;    // linha inicial do navio vertical
    int navioVerticalColuna = 7;   // coluna inicial do navio vertical

    // === Posiciona Navio Horizontal ===
    // Validação: precisa caber dentro do tabuleiro
    if (navioHorizontalColuna + TAM_NAVIO <= TAM_TABULEIRO) {
        int podeColocar = 1;
        for (int i = 0; i < TAM_NAVIO; i++) {
            if (tabuleiro[navioHorizontalLinha][navioHorizontalColuna + i] != 0) {
                podeColocar = 0;
                break;
            }
        }
        if (podeColocar) {
            for (int i = 0; i < TAM_NAVIO; i++) {
                tabuleiro[navioHorizontalLinha][navioHorizontalColuna + i] = 3;
            }
        } else {
            printf("Erro: sobreposição no navio horizontal!\n");
        }
    } else {
        printf("Erro: navio horizontal fora dos limites!\n");
    }

    // === Posiciona Navio Vertical ===
    if (navioVerticalLinha + TAM_NAVIO <= TAM_TABULEIRO) {
        int podeColocar = 1;
        for (int i = 0; i < TAM_NAVIO; i++) {
            if (tabuleiro[navioVerticalLinha + i][navioVerticalColuna] != 0) {
                podeColocar = 0;
                break;
            }
        }
        if (podeColocar) {
            for (int i = 0; i < TAM_NAVIO; i++) {
                tabuleiro[navioVerticalLinha + i][navioVerticalColuna] = 3;
            }
        } else {
            printf("Erro: sobreposição no navio vertical!\n");
        }
    } else {
        printf("Erro: navio vertical fora dos limites!\n");
    }

    // === Exibe o Tabuleiro ===
    printf("\n--- TABULEIRO ---\n\n");
    for (int i = 0; i < TAM_TABULEIRO; i++) {
        for (int j = 0; j < TAM_TABULEIRO; j++) {
            printf("%d ", tabuleiro[i][j]);
        }
        printf("\n");
    }

    return 0;
}
#include <stdio.h>

#define TAM_TABULEIRO 10   // tamanho fixo do tabuleiro
#define TAM_NAVIO 3        // tamanho fixo dos navios

// Função auxiliar para verificar se pode posicionar o navio
int podeColocarNavio(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO],
                     int linha, int coluna, int orientacao) {
    /*
       Orientação:
       0 = horizontal
       1 = vertical
       2 = diagonal principal (↘)
       3 = diagonal secundária (↙)
    */

    for (int i = 0; i < TAM_NAVIO; i++) {
        int l = linha, c = coluna;

        if (orientacao == 0) c += i;          // horizontal
        else if (orientacao == 1) l += i;     // vertical
        else if (orientacao == 2) { l += i; c += i; }   // diagonal ↘
        else if (orientacao == 3) { l += i; c -= i; }   // diagonal ↙

        // Verifica limites
        if (l < 0 || l >= TAM_TABULEIRO || c < 0 || c >= TAM_TABULEIRO)
            return 0;

        // Verifica sobreposição
        if (tabuleiro[l][c] != 0)
            return 0;
    }
    return 1;
}

// Função para posicionar o navio
void colocarNavio(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO],
                  int linha, int coluna, int orientacao) {
    for (int i = 0; i < TAM_NAVIO; i++) {
        int l = linha, c = coluna;

        if (orientacao == 0) c += i;          // horizontal
        else if (orientacao == 1) l += i;     // vertical
        else if (orientacao == 2) { l += i; c += i; }   // diagonal ↘
        else if (orientacao == 3) { l += i; c -= i; }   // diagonal ↙

        tabuleiro[l][c] = 3;  // marca o navio no tabuleiro
    }
}

int main() {
    int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO] = {0};  
    // Inicializa com água (0)

    // Coordenadas dos 4 navios (linha, coluna, orientação)
    // -> Você pode mudar essas coordenadas livremente
    int navios[4][3] = {
        {2, 1, 0},  // horizontal
        {5, 7, 1},  // vertical
        {0, 0, 2},  // diagonal principal ↘
        {0, 9, 3}   // diagonal secundária ↙
    };

    // Posiciona os 4 navios
    for (int i = 0; i < 4; i++) {
        int linha = navios[i][0];
        int coluna = navios[i][1];
        int orientacao = navios[i][2];

        if (podeColocarNavio(tabuleiro, linha, coluna, orientacao)) {
            colocarNavio(tabuleiro, linha, coluna, orientacao);
        } else {
            printf("Erro: não foi possível posicionar o navio %d!\n", i + 1);
        }
    }

    // Exibe o tabuleiro
    printf("\n--- TABULEIRO BATALHA NAVAL ---\n\n");
    for (int i = 0; i < TAM_TABULEIRO; i++) {
        for (int j = 0; j < TAM_TABULEIRO; j++) {
            printf("%d ", tabuleiro[i][j]);
        }
        printf("\n");
    }

    return 0;
}
#include <stdio.h>

#define TAM_TABULEIRO 10
#define TAM_NAVIO 3
#define TAM_HABILIDADE 5  // tamanho fixo das matrizes de habilidade

// === Funções para criar matrizes de habilidade ===

// Cone (expande para baixo a partir do topo da matriz)
void criarCone(int habilidade[TAM_HABILIDADE][TAM_HABILIDADE]) {
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            // O cone vai crescendo: linha 0 -> 1 célula, linha 1 -> 3, linha 2 -> 5
            int meio = TAM_HABILIDADE / 2;
            if (j >= meio - i && j <= meio + i)
                habilidade[i][j] = 1;
            else
                habilidade[i][j] = 0;
        }
    }
}

// Cruz (linhas e colunas que passam pelo centro)
void criarCruz(int habilidade[TAM_HABILIDADE][TAM_HABILIDADE]) {
    int meio = TAM_HABILIDADE / 2;
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            if (i == meio || j == meio)
                habilidade[i][j] = 1;
            else
                habilidade[i][j] = 0;
        }
    }
}

// Octaedro (forma de losango a partir do centro)
void criarOctaedro(int habilidade[TAM_HABILIDADE][TAM_HABILIDADE]) {
    int meio = TAM_HABILIDADE / 2;
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            if (abs(i - meio) + abs(j - meio) <= meio)
                habilidade[i][j] = 1;
            else
                habilidade[i][j] = 0;
        }
    }
}

// === Função para aplicar habilidade no tabuleiro ===
void aplicarHabilidade(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO],
                       int habilidade[TAM_HABILIDADE][TAM_HABILIDADE],
                       int origemLinha, int origemColuna) {
    int meio = TAM_HABILIDADE / 2;

    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            if (habilidade[i][j] == 1) {
                int l = origemLinha + (i - meio);
                int c = origemColuna + (j - meio);

                // Valida se está dentro do tabuleiro
                if (l >= 0 && l < TAM_TABULEIRO && c >= 0 && c < TAM_TABULEIRO) {
                    if (tabuleiro[l][c] == 0) // só marca se for água
                        tabuleiro[l][c] = 5;
                }
            }
        }
    }
}

// === Função para exibir o tabuleiro ===
void exibirTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]) {
    printf("\n--- TABULEIRO ---\n\n");
    for (int i = 0; i < TAM_TABULEIRO; i++) {
        for (int j = 0; j < TAM_TABULEIRO; j++) {
            if (tabuleiro[i][j] == 0) printf("~ ");   // água
            else if (tabuleiro[i][j] == 3) printf("N "); // navio
            else if (tabuleiro[i][j] == 5) printf("* "); // habilidade
        }
        printf("\n");
    }
}

int main() {
    // === Criação do tabuleiro ===
    int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO] = {0};

    // Posiciona um navio horizontal (fixo para exemplo)
    for (int i = 0; i < TAM_NAVIO; i++) {
        tabuleiro[2][2 + i] = 3;
    }
    // Posiciona um navio vertical
    for (int i = 0; i < TAM_NAVIO; i++) {
        tabuleiro[5 + i][6] = 3;
    }

    // === Criação das habilidades ===
    int cone[TAM_HABILIDADE][TAM_HABILIDADE];
    int cruz[TAM_HABILIDADE][TAM_HABILIDADE];
    int octaedro[TAM_HABILIDADE][TAM_HABILIDADE];

    criarCone(cone);
    criarCruz(cruz);
    criarOctaedro(octaedro);

    // === Aplicação das habilidades no tabuleiro ===
    aplicarHabilidade(tabuleiro, cone, 1, 5);      // cone no ponto (1,5)
    aplicarHabilidade(tabuleiro, cruz, 7, 2);      // cruz no ponto (7,2)
    aplicarHabilidade(tabuleiro, octaedro, 5, 8);  // octaedro no ponto (5,8)

    // === Exibe tabuleiro final ===
    exibirTabuleiro(tabuleiro);

    return 0;
}